{"version":3,"sources":["index.js"],"names":["listeners","containers","middleware","state","mutableState","callbackOnion","coreFunction","action","type","forEach","el","Object","keys","key","dispatch","rerender","process","env","NODE_ENV","Array","isArray","idx","hasOwnProperty","sort","a","b","priority","reduce","nextLayer","layer","currentAction","func","updater","enqueueForceUpdate","listen","callback","index","push","remove","connect","container","apply","newMiddleware","unshift","getState","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["/*\n * Minimux v1.0.0\n * Author: Steven Barnett (stevendesu) <steven.abarnett@gmail.com>\n * License: MIT +no-false-attribs (https://spdx.org/licenses/MITNFA.html)\n *\n * I made this library because I liked the ideology of Redux, but not the\n * implementation. This is my attempt to rebuild Redux with absolute minimal\n * functionality and to allow for absolute minimal bootstrapping in order to\n * write effective code.\n *\n * Now that I've knocked out all of my \"TODO\"s, I'm officially calling this the\n * end of \"patches\", and from now on a patch will only be a bugfix. Any feature\n * additions will be minor updates.\n *\n * Considerations:\n *  - Two of our functions (connect and apply) are one-liners... why not just\n *    make \"containers\" and \"middleware\" public?\n *  - What should be the return values of each function?\n *  - How do you UNbind middleware or DISconnect containers? Or UNlisten?\n *  - Should it be possible to connect to a subset of the state? If you could\n *    bind reducers to subsets of state then it would be more modular\n */\n\nconst listeners = {};\nconst containers = [];\nconst middleware = [];\n\nlet state = {};\nconst mutableState = {};\n\n// The \"onion\" describes the layers of middleware that we must parse through\n// in order to execute our action.\nlet callbackOnion = null;\n\nconst coreFunction = (action) => {\n\tif (listeners[action.type]) {\n\t\tlisteners[action.type].forEach((el) => {\n\t\t\tstate = el(state, action);\n\t\t\t// This is a temporary (and hideous) hack to maintain backwards compatibility until I'm happy enough with\n\t\t\t// the API to release v2.0.0\n\t\t\t// Previously you could \"import { state } from 'minimux'\" and it was properly updated\n\t\t\t// This was poor practice because it allowed anyone to edit the state without using actions\n\t\t\t// A getState() function has been added to return only the most recent immutable state\n\t\t\tObject.keys(mutableState).forEach((key) => {\n\t\t\t\tdelete mutableState[key];\n\t\t\t});\n\t\t\tObject.keys(state).forEach((key) => {\n\t\t\t\tmutableState[key] = state[key];\n\t\t\t});\n\t\t});\n\t}\n\treturn state;\n};\n\nconst dispatch = (action, rerender = true) => {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tif (typeof action !== \"object\") {\n\t\t\tthrow \"Invalid type (\" + (typeof action) + \") for argument \\\"action\\\" passed to dispatch. Expected \" +\n\t\t\t      \"object or array of objects.\";\n\t\t}\n\t\tif (Array.isArray(action)) {\n\t\t\taction.forEach((el, idx) => {\n\t\t\t\tif (typeof el !== \"object\" || Array.isArray(el)) {\n\t\t\t\t\tthrow \"Invalid type (\" + (typeof el) + \") for action at index \" + idx + \" passed to dispatch. \" +\n\t\t\t\t\t      \"Expected object.\";\n\t\t\t\t}\n\t\t\t\tif (!el.hasOwnProperty(\"type\")) {\n\t\t\t\t\tthrow \"Action at index \" + idx + \" passed to dispatch was missing required property: \\\"type\\\"\";\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (!action.hasOwnProperty(\"type\")) {\n\t\t\tthrow \"Action passed to dispatch was missing required property: \\\"type\\\"\";\n\t\t}\n\t\tif (typeof rerender !== \"boolean\") {\n\t\t\tthrow \"Invalid type (\" + (typeof rerender) + \") for argument \\\"rerender\\\" passed to dispatch. Expected \" +\n\t\t\t      \"boolean.\";\n\t\t}\n\t}\n\tif (callbackOnion === null) {\n\t\tmiddleware.sort((a, b) => {\n\t\t\treturn a.priority - b.priority;\n\t\t});\n\t\tcallbackOnion = middleware.reduce((nextLayer, layer) => {\n\t\t\treturn (currentAction) => {\n\t\t\t\treturn layer.func(currentAction, nextLayer);\n\t\t\t};\n\t\t}, coreFunction);\n\t}\n\tif (!Array.isArray(action)) {\n\t\taction = [action];\n\t}\n\taction.forEach((el) => {\n\t\tstate = callbackOnion(el);\n\t});\n\tif (rerender) {\n\t\tcontainers.forEach((el) => {\n\t\t\tel.updater.enqueueForceUpdate(el);\n\t\t});\n\t}\n};\n\nconst listen = (type, callback) => {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tif (typeof type !== \"string\") {\n\t\t\tthrow \"Invalid type (\" + (typeof type) + \") for argument \\\"type\\\" passed to listen. Expected string.\";\n\t\t}\n\t\tif (typeof callback !== \"function\") {\n\t\t\tthrow \"Invalid type (\" + (typeof callback) + \") for argument \\\"callback\\\" passed to listen. Expected \" +\n\t\t\t      \"function.\";\n\t\t}\n\t}\n\tlisteners[type] = listeners[type] || [];\n\tconst index = listeners[type].push(callback) - 1;\n\treturn {\n\t\tremove: () => {\n\t\t\tdelete listeners[type][index];\n\t\t}\n\t};\n};\n\nconst connect = (container) => {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tif (typeof container !== \"object\") {\n\t\t\tthrow \"Invalid type (\" + (typeof container) + \") for argument \\\"container\\\" passed to listen. Expected \" +\n\t\t\t      \"object.\";\n\t\t}\n\t\t// TODO: Test for ReactDOM.render() return value?\n\t\t// Maybe not, actually. I want to get rid of that dependency...\n\t}\n\tcontainers.push(container);\n};\n\nconst apply = (newMiddleware, priority = 0) => {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tif (typeof newMiddleware !== \"function\") {\n\t\t\tthrow \"Invalid type (\" + (typeof newMiddleware) + \") for argument \\\"newMiddleware\\\" passed to listen. \" +\n\t\t\t      \"Expected function.\";\n\t\t}\n\t\tif (typeof priority !== \"number\") {\n\t\t\tthrow \"Invalid type (\" + (typeof priority) + \") for argument \\\"priority\\\" passed to listen. Expected \" +\n\t\t\t      \"number.\";\n\t\t}\n\t}\n\tmiddleware.unshift({ priority, func: newMiddleware });\n\t// Additional middleware was added. We need to recalulate this guy.\n\tcallbackOnion = null;\n};\n\nconst getState = () => {\n\treturn state;\n};\n\n// Switching to CommonJS allowed a bit better name mangling for dat mad compression\nmodule.exports = {\n\tstate: mutableState,\n\tgetState,\n\tdispatch,\n\tlisten,\n\tconnect,\n\tapply\n};\n"],"sourceRoot":"/source/"}