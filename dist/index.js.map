{"version":3,"sources":["index.js"],"names":["reducers","callbacks","middleware","state","mutableState","callbackOnion","coreFunction","action","type","forEach","el","Object","keys","key","dispatch","rerender","process","env","NODE_ENV","Array","isArray","idx","hasOwnProperty","sort","a","b","priority","reduce","nextLayer","layer","currentAction","func","updater","enqueueForceUpdate","register","actions","reducer","push","listen","callback","connect","unlisten","index","indexOf","splice","use","newMiddleware","unshift","apply","getState","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["/*\n * Minimux %VERSION%\n * Author: Steven Barnett (stevendesu) <steven.abarnett@gmail.com>\n * License: MIT +no-false-attribs (https://spdx.org/licenses/MITNFA.html)\n *\n * I made this library because I liked the ideology of Redux, but not the\n * implementation. This is my attempt to rebuild Redux with absolute minimal\n * functionality and to allow for absolute minimal bootstrapping in order to\n * write effective code.\n *\n * There are four main API endpoints:\n *  - dispatch(action, [data])\n *     This is the only valid way to modify the state\n *  - on(actions, reducer)\n *     When an action is thrown, apply the reducers\n *  - bind(callback)\n *     Callback will be called with the current state whenever state changes\n *  - apply(middleware, [priority])\n *     Applies middleware to the dispatch function (see documentation)\n *\n * Considerations:\n *  - Should it be possible to connect to a subset of the state? If you could\n *    bind reducers to subsets of state then it would be more modular\n */\n\nconst reducers = {};\nconst callbacks = [];\nconst middleware = [];\n\nlet state = {};\nconst mutableState = {};\n\n// The \"onion\" describes the layers of middleware that we must parse through\n// in order to execute our action.\nlet callbackOnion = null;\n\nconst coreFunction = (action) => {\n\tif (reducers[action.type]) {\n\t\treducers[action.type].forEach((el) => {\n\t\t\tstate = el(state, action);\n\t\t\t// This is a temporary (and hideous) hack to maintain backwards compatibility until I'm happy enough with\n\t\t\t// the API to release v2.0.0\n\t\t\t// Previously you could \"import { state } from 'minimux'\" and it was properly updated\n\t\t\t// This was poor practice because it allowed anyone to edit the state without using actions\n\t\t\t// A getState() function has been added to return only the most recent immutable state\n\t\t\tObject.keys(mutableState).forEach((key) => {\n\t\t\t\tdelete mutableState[key];\n\t\t\t});\n\t\t\tObject.keys(state).forEach((key) => {\n\t\t\t\tmutableState[key] = state[key];\n\t\t\t});\n\t\t});\n\t}\n\treturn state;\n};\n\nconst dispatch = (action, rerender = true) => {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tif (typeof action !== \"object\") {\n\t\t\tthrow \"Invalid type (\" + (typeof action) + \") for argument \\\"action\\\" passed to dispatch. Expected \" +\n\t\t\t      \"object or array of objects.\";\n\t\t}\n\t\tif (Array.isArray(action)) {\n\t\t\taction.forEach((el, idx) => {\n\t\t\t\tif (typeof el !== \"object\" || Array.isArray(el)) {\n\t\t\t\t\tthrow \"Invalid type (\" + (typeof el) + \") for action at index \" + idx + \" passed to dispatch. \" +\n\t\t\t\t\t      \"Expected object.\";\n\t\t\t\t}\n\t\t\t\tif (!el.hasOwnProperty(\"type\")) {\n\t\t\t\t\tthrow \"Action at index \" + idx + \" passed to dispatch was missing required property: \\\"type\\\"\";\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (!action.hasOwnProperty(\"type\")) {\n\t\t\tthrow \"Action passed to dispatch was missing required property: \\\"type\\\"\";\n\t\t}\n\t\tif (typeof rerender !== \"boolean\") {\n\t\t\tthrow \"Invalid type (\" + (typeof rerender) + \") for argument \\\"rerender\\\" passed to dispatch. Expected \" +\n\t\t\t      \"boolean.\";\n\t\t}\n\t}\n\tif (callbackOnion === null) {\n\t\tmiddleware.sort((a, b) => {\n\t\t\treturn a.priority - b.priority;\n\t\t});\n\t\tcallbackOnion = middleware.reduce((nextLayer, layer) => {\n\t\t\treturn (currentAction) => {\n\t\t\t\treturn layer.func(currentAction, nextLayer);\n\t\t\t};\n\t\t}, coreFunction);\n\t}\n\tif (!Array.isArray(action)) {\n\t\taction = [action];\n\t}\n\taction.forEach((el) => {\n\t\tstate = callbackOnion(el);\n\t});\n\tif (rerender) {\n\t\tcallbacks.forEach((el) => {\n\t\t\tif (typeof el === \"function\") {\n\t\t\t\tel(state);\n\t\t\t} else {\n\t\t\t\tel.updater.enqueueForceUpdate(el);\n\t\t\t}\n\t\t});\n\t}\n};\n\nconst register = (actions, reducer) => {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tif (typeof actions !== \"string\" && (typeof actions !== \"object\" || !Array.isArray(actions))) {\n\t\t\tthrow \"Invalid type (\" + (typeof actions) + \") for argument \\\"actions\\\" passed to listen. Expected string.\";\n\t\t}\n\t\tif (typeof reducer !== \"function\") {\n\t\t\tthrow \"Invalid type (\" + (typeof reducer) + \") for argument \\\"reducer\\\" passed to listen. Expected \" +\n\t\t\t      \"function.\";\n\t\t}\n\t}\n\tif (typeof actions === \"string\") {\n\t\tactions = [actions];\n\t}\n\tactions.forEach((action) => {\n\t\treducers[action] = reducers[action] || [];\n\t\treducers[action].push(reducer);\n\t});\n};\n\n// https://www.reddit.com/r/javascript/comments/538wgm/suggestions_for_optimal_api_for_a_minimalist/\n// /user/Strobljus made a good point that the ability to unbind middleware (or reducers) is effectively putting state\n// into the middleware (and reducer) lists - instead of keeping all state in the store\n/*\nconst unregister = (actions, reducer) => {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tif (typeof actions !== \"string\" && (typeof actions !== \"object\" || !Array.isArray(actions))) {\n\t\t\tthrow \"Invalid type (\" + (typeof actions) + \") for argument \\\"actions\\\" passed to listen. Expected string.\";\n\t\t}\n\t\tif (typeof reducer !== \"function\") {\n\t\t\tthrow \"Invalid type (\" + (typeof reducer) + \") for argument \\\"reducer\\\" passed to listen. Expected \" +\n\t\t\t      \"function.\";\n\t\t}\n\t}\n\tif (typeof actions === \"string\") {\n\t\tactions = [actions];\n\t}\n\tactions.forEach((action) => {\n\t\tconst index = reducers[action].indexOf(reducer);\n\t\tif (index !== -1) {\n\t\t\treducers[action].splice(index, 1);\n\t\t}\n\t});\n};\n*/\n\nconst listen = (callback, reducer) => {\n\tif (reducer) {\n\t\t// Old, deprecated interpretation of \"listen\"\n\t\treturn register(callback, reducer);\n\t}\n\t// New, spiffy interpretation of \"listen\"\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tif (typeof callback !== \"object\" && typeof callback !== \"function\") {\n\t\t\tthrow \"Invalid type (\" + (typeof callback) + \") for argument \\\"callback\\\" passed to listen. Expected \" +\n\t\t\t      \"function (object accepted for now).\";\n\t\t}\n\t\t// Importing React just to test instanceof means adding 14 kB of overhead for something I intend to deprecate\n\t\t/*\n\t\tif (typeof callback === \"object\" && !callback instanceof React.Component) {\n\t\t\tthrow \"Invalid type (object) for argument \\\"callback\\\" passed to listen. If an object is passed, it \" +\n\t\t\t      \"must be an instance of React.Component.\"\n\t\t}\n\t\t*/\n\t}\n\tcallbacks.push(callback);\n};\nconst connect = listen;\n\nconst unlisten = (callback) => {\n\tconst index = callbacks.indexOf(callback);\n\tif (index !== -1) {\n\t\tcallbacks.splice(index, 1);\n\t}\n};\n\nconst use = (newMiddleware, priority = 0) => {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tif (typeof newMiddleware !== \"function\") {\n\t\t\tthrow \"Invalid type (\" + (typeof newMiddleware) + \") for argument \\\"newMiddleware\\\" passed to listen. \" +\n\t\t\t      \"Expected function.\";\n\t\t}\n\t\tif (typeof priority !== \"number\") {\n\t\t\tthrow \"Invalid type (\" + (typeof priority) + \") for argument \\\"priority\\\" passed to listen. Expected \" +\n\t\t\t      \"number.\";\n\t\t}\n\t}\n\tmiddleware.unshift({ priority, func: newMiddleware });\n\t// Additional middleware was added. We need to recalulate this guy.\n\tcallbackOnion = null;\n};\nconst apply = use;\n\nconst getState = () => {\n\treturn state;\n};\n\n// Switching to CommonJS allowed a bit better name mangling for dat mad compression\nmodule.exports = {\n\tstate: mutableState,\n\tgetState,\n\tdispatch,\n\tregister,\n\t//unregister,\n\tlisten,\n\tunlisten,\n\tuse,\n\tconnect, // Deprecated\n\tapply // Deprecated\n};\n"],"sourceRoot":"/source/"}