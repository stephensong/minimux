{"version":3,"sources":["index.js"],"names":["dispatch","listen","connect","apply","listeners","containers","middleware","state","callbackOnion","coreFunction","action","type","forEach","el","rerender","process","env","NODE_ENV","Array","isArray","idx","hasOwnProperty","sort","a","b","priority","reduce","nextLayer","layer","currentAction","func","updater","enqueueForceUpdate","callback","push","container","newMiddleware","unshift"],"mappings":"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","file":"index.js","sourcesContent":["/*\n * Minimux v1.0.0\n * Author: Steven Barnett (stevendesu) <steven.abarnett@gmail.com>\n * License: MIT +no-false-attribs (https://spdx.org/licenses/MITNFA.html)\n *\n * I made this library because I liked the ideology of Redux, but not the\n * implementation. This is my attempt to rebuild Redux with absolute minimal\n * functionality and to allow for absolute minimal bootstrapping in order to\n * write effective code.\n *\n * Considerations:\n *  - Two of our functions (connect and apply) are one-liners... why not just\n *    make \"containers\" and \"middleware\" public?\n *  - What should be the return values of each function?\n *  - How do you UNbind middleware or DISconnect containers? Or UNlisten?\n *  - Should it be possible to connect to a subset of the state? If you could\n *    bind reducers to subsets of state then it would be more modular\n *  - Could we add support for CJS, AMD, and UMD? Maybe as a build step?\n */\n\nconst listeners = {};\nconst containers = [];\nconst middleware = [];\n\nexport var state = {};\n\n// The \"onion\" describes the layers of middleware that we must parse through\n// in order to execute our action.\nlet callbackOnion = null;\n\nconst coreFunction = (action) => {\n\tif (listeners[action.type]) {\n\t\tlisteners[action.type].forEach((el) => {\n\t\t\tstate = el(state, action);\n\t\t});\n\t}\n\treturn state;\n};\n\nexport function dispatch(action, rerender = true) {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tif (typeof action !== \"object\") {\n\t\t\tthrow \"Invalid type (\" + (typeof action) + \") for argument \\\"action\\\" passed to dispatch. Expected \" +\n\t\t\t      \"object or array of objects.\";\n\t\t}\n\t\tif (Array.isArray(action)) {\n\t\t\taction.forEach((el, idx) => {\n\t\t\t\tif (typeof el !== \"object\" || Array.isArray(el)) {\n\t\t\t\t\tthrow \"Invalid type (\" + (typeof el) + \") for action at index \" + idx + \" passed to dispatch. \" +\n\t\t\t\t\t      \"Expected object.\";\n\t\t\t\t}\n\t\t\t\tif (!el.hasOwnProperty(\"type\")) {\n\t\t\t\t\tthrow \"Action at index \" + idx + \" passed to dispatch was missing required property: \\\"type\\\"\";\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (!action.hasOwnProperty(\"type\")) {\n\t\t\tthrow \"Action passed to dispatch was missing required property: \\\"type\\\"\";\n\t\t}\n\t\tif (typeof rerender !== \"boolean\") {\n\t\t\tthrow \"Invalid type (\" + (typeof rerender) + \") for argument \\\"rerender\\\" passed to dispatch. Expected \" +\n\t\t\t      \"boolean.\";\n\t\t}\n\t}\n\tif (callbackOnion === null) {\n\t\tmiddleware.sort((a, b) => {\n\t\t\treturn a.priority - b.priority;\n\t\t});\n\t\tcallbackOnion = middleware.reduce((nextLayer, layer) => {\n\t\t\treturn (currentAction) => {\n\t\t\t\treturn layer.func(currentAction, nextLayer);\n\t\t\t};\n\t\t}, coreFunction);\n\t}\n\tif (!Array.isArray(action)) {\n\t\taction = [action];\n\t}\n\taction.forEach((el) => {\n\t\tstate = callbackOnion(el);\n\t});\n\tif (rerender) {\n\t\tcontainers.forEach((el) => {\n\t\t\tel.updater.enqueueForceUpdate(el);\n\t\t});\n\t}\n}\n\nexport function listen(type, callback) {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tif (typeof type !== \"string\") {\n\t\t\tthrow \"Invalid type (\" + (typeof type) + \") for argument \\\"type\\\" passed to listen. Expected string.\";\n\t\t}\n\t\tif (typeof callback !== \"function\") {\n\t\t\tthrow \"Invalid type (\" + (typeof callback) + \") for argument \\\"callback\\\" passed to listen. Expected \" +\n\t\t\t      \"function.\";\n\t\t}\n\t}\n\tlisteners[type] = listeners[type] || [];\n\tlisteners[type].push(callback);\n}\n\nexport function connect(container) {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tif (typeof container !== \"object\") {\n\t\t\tthrow \"Invalid type (\" + (typeof container) + \") for argument \\\"container\\\" passed to listen. Expected \" +\n\t\t\t      \"object.\";\n\t\t}\n\t\t// TODO: Test for ReactDOM.render() return value?\n\t\t// Maybe not, actually. I want to get rid of that dependency...\n\t}\n\tcontainers.push(container);\n}\n\nexport function apply(newMiddleware, priority = 0) {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tif (typeof newMiddleware !== \"function\") {\n\t\t\tthrow \"Invalid type (\" + (typeof newMiddleware) + \") for argument \\\"newMiddleware\\\" passed to listen. \" +\n\t\t\t      \"Expected function.\";\n\t\t}\n\t\tif (typeof priority !== \"number\") {\n\t\t\tthrow \"Invalid type (\" + (typeof priority) + \") for argument \\\"priority\\\" passed to listen. Expected \" +\n\t\t\t      \"number.\";\n\t\t}\n\t}\n\tmiddleware.unshift({ priority, func: newMiddleware });\n\t// Additional middleware was added. We need to recalulate this guy.\n\tcallbackOnion = null;\n}\n"],"sourceRoot":"/source/"}